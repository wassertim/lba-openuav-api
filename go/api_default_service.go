/*
 * LBA OpenUAV Questions
 *
 * Questions and answers of LBA OpenUAV for preparing to the exam.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"log"
	"net/http"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	mongoClient *mongo.Client
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(mongoClient *mongo.Client) DefaultApiServicer {
	return &DefaultApiService{
		mongoClient: mongoClient,
	}
}

// GetAllQuestions -
func (s *DefaultApiService) GetAllQuestions(ctx context.Context) (ImplResponse, error) {
	collection := s.mongoClient.Database("lba").Collection("questions-all")
	results := []*Question{}
	findOptions := options.Find()
	//allQuery := bson.D{{}}
	query := bson.D{{
		"answers.correctAnswer",
		bson.D{{"$ne",
			true,
		}},
	}}
	cur, err := collection.Find(context.TODO(), query, findOptions)
	if err != nil {
		log.Fatal(err)
	}

	// Finding multiple documents returns a cursor
	// Iterating through the cursor allows us to decode documents one at a time
	for cur.Next(context.TODO()) {

		// create a value into which the single document can be decoded
		var elem Question
		err := cur.Decode(&elem)
		if err != nil {
			log.Fatal(err)
		}

		results = append(results, &elem)
	}

	return Response(200, results), nil
}

// GetOneQuestion -
func (s *DefaultApiService) GetOneQuestion(ctx context.Context, type_ string) (ImplResponse, error) {
	// TODO - update GetOneQuestion with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Question{}) or use other options such as http.Ok ...
	//return Response(200, Question{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetOneQuestion method not implemented")
}

// GetQuestionById -
func (s *DefaultApiService) GetQuestionById(ctx context.Context, questionId int32) (ImplResponse, error) {
	// TODO - update GetQuestionById with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Question{}) or use other options such as http.Ok ...
	//return Response(200, Question{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetQuestionById method not implemented")
}

// SetQuestionAnswered -
func (s *DefaultApiService) SetQuestionAnswered(ctx context.Context, questionId int32, inlineObject InlineObject) (ImplResponse, error) {
	// TODO - update SetQuestionAnswered with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	//return Response(204, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("SetQuestionAnswered method not implemented")
}

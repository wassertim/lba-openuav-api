/*
 * LBA OpenUAV Questions
 *
 * Questions and answers of LBA OpenUAV for preparing to the exam.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"GetAllQuestions",
			strings.ToUpper("Get"),
			"/questions",
			c.GetAllQuestions,
		},
		{
			"GetOneQuestion",
			strings.ToUpper("Get"),
			"/questions/one",
			c.GetOneQuestion,
		},
		{
			"GetQuestionById",
			strings.ToUpper("Get"),
			"/questions/one/{questionId}",
			c.GetQuestionById,
		},
		{
			"SetQuestionAnswered",
			strings.ToUpper("Put"),
			"/questions/one/{questionId}",
			c.SetQuestionAnswered,
		},
	}
}

// GetAllQuestions -
func (c *DefaultApiController) GetAllQuestions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllQuestions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetOneQuestion -
func (c *DefaultApiController) GetOneQuestion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	type_ := query.Get("type")
	result, err := c.service.GetOneQuestion(r.Context(), type_)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetQuestionById -
func (c *DefaultApiController) GetQuestionById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	questionId, err := parseInt32Parameter(params["questionId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetQuestionById(r.Context(), questionId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SetQuestionAnswered -
func (c *DefaultApiController) SetQuestionAnswered(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	questionId, err := parseInt32Parameter(params["questionId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	inlineObject := AnswerPayload{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&inlineObject); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInlineObjectRequired(inlineObject); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetQuestionAnswered(r.Context(), questionId, inlineObject)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
